-- We create a new Database so that it does not interfere with others working databases
-- This statement will fail if we run it the 2nd time, since DB is already created. So while checking, need to start from next statement.
CREATE DATABASE S_ATHA_UPGRAD;

-- We use the new database
USE S_ATHA_UPGRAD;

-- IMPORTANT: BEFORE CREATING ANY TABLE, MAKE SURE YOU RUN THIS COMMAND */
ADD JAR /opt/cloudera/parcels/CDH/lib/hive/lib/hive-hcatalog-core-1.1.0-cdh5.11.2.jar;



-- We have a drop table statement so that we can run the query multiple times, in case table is already present
drop table nyc_taxi;

-- Create the external table with base data as is, with correct format for all columns as per definitions
create external table if not exists nyc_taxi (
VendorID int, 
tpep_pickup_datetime string, 
tpep_dropoff_datetime string, 
Passenger_count int, 
Trip_distance double,
RateCodeID int, 
Store_and_fwd_flag string,
PULocationID int, 
DOLocationID int, 
Payment_type int, 
Fare_amount double, 
Extra double, 
MTA_tax double, 
Tip_amount double, 
Tolls_amount double, 
Improvement_surcharge double, 
total_amount double)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE
LOCATION '/common_folder/nyc_taxi_data'
tblproperties ("skip.header.line.count"="1");

-- Check the table that got created with limit of 10 rows.
select * from nyc_taxi limit 10;

-- Checking to see if any columns has null value in case of incorrect format or of 0 length
select * from nyc_taxi
where VendorID is null or
tpep_pickup_datetime is null or
tpep_dropoff_datetime is null or
passenger_count is null or
trip_distance is null or
RatecodeID is null or
store_and_fwd_flag is null or
PULocationID is null or
DOLocationID is null or
payment_type is null or
fare_amount is null or
extra is null or
mta_tax is null or
tip_amount is null or
tolls_amount is null or
improvement_surcharge is null or
total_amount is null ; --0 records

select * from nyc_taxi
where length(VendorID) = 0 or
length(tpep_pickup_datetime) = 0 or
length(tpep_dropoff_datetime) = 0 or
length(passenger_count) = 0 or
length(trip_distance) = 0 or
length(RatecodeID) = 0 or
length(store_and_fwd_flag) = 0 or
length(PULocationID) = 0 or
length(DOLocationID) = 0 or
length(payment_type) = 0 or
length(fare_amount) = 0 or
length(extra) = 0 or
length(mta_tax) = 0 or
length(tip_amount) = 0 or
length(tolls_amount) = 0 or
length(improvement_surcharge) = 0 or
length(total_amount) = 0; --0 records

-- So no records have null or empty value.
-- Next we try to do the Basic Data Quality checks.

-----------------------------------------------
-----------------------------------------------
-- Basic Data Quality Checks

-- Check for - How many records has each TPEP provider provided? Write a query that summarises the number of records of each provider.
-- We get the vendor names from the data dictionary and use case statement to identify vendor name from vendor ID and get the trip counts.
select distinct vendorid from nyc_taxi;

select case when vendorid = 1 then "Creative Mobile Technologies, LLC"
            else "VeriFone Inc."
        end as TPEP_provider,
        count(*) rec_cnt
from nyc_taxi
group by vendorid
order by rec_cnt; -- 527386 and 647183 as below


-- 	tpep_provider	rec_cnt
--  VeriFone Inc. (Vendor ID 2)	647183
--  Creative Mobile Technologies, LLC(vendorID 1)	527386

-- Total count of data is as below
select count(*) as rec_cnt from nyc_taxi; -- 1174569

-- The data provided is for months November and December only. 
-- Check whether the data is consistent, and if not, identify the data quality issues. 
-- Mention all data quality issues in comments.

-- We now check the data to see if it is only for Nov and Dec months;

select * from nyc_taxi 
where substr(tpep_pickup_datetime, 6, 2) not in ('11','12'); 

-- There are some 12 rows which have data which falls not in November and December month, and they are all from vendor ID 2. 
-- We will filter those data when creating a table with clean data set.

select count(*) rec_cnt, substr(tpep_pickup_datetime, 6, 2) month from nyc_taxi 
group by substr(tpep_pickup_datetime, 6, 2);

-- 	rec_cnt	month
--  6	01
--  6	10
-- 	580300	11
--	594257	12

-- Checking to see if any other data quality issues are there, like 0 passenger count, 0 distance, or maybe 0 amount etc.
select * from nyc_taxi
where passenger_count = 0
or fare_amount = 0
or trip_distance = 0

-- There are some rows with 0 passenger count, which is erroneous data.
-- Some rows are with negative fare amount, or 0 fare amount is which are also erroneous.
-- Some rows have 0 trip_distance, but that can be OK if passengers canceled trip after getting in, and some base amount is deducted.

-- Next we check the data against the specific values mentioned in data disctionary for certain columns.

select count(*) rec_cnt, RateCodeID from nyc_taxi group by RateCodeID;
-- There are some 9 records with 99 as RateCodeID, which is not correct. Possible values of RateCodeID are only from 1-6 

select count(*) rec_cnt, Store_and_fwd_flag from nyc_taxi group by Store_and_fwd_flag;
-- Here we see that the field Store_and_fwd_flag is all correct, as the viable options are N and Y, and the same is there.

select count(*) rec_cnt, Payment_type from nyc_taxi group by Payment_type;
-- Payment_type data is also fine since distinct values are between 1-6.

select count(*) rec_cnt, Extra from nyc_taxi group by Extra;
-- Valid Extra values are 0, 0.5, 1 and overnight charges. Negative extra charges are not valid, so they are erroneous data and need to be filtered.

select count(*) rec_cnt, mta_tax from nyc_taxi group by mta_tax;
-- Valid mta_tax values are  0 and 0.5, we can filter out the others as they are incorrect data.

select count(*) rec_cnt, improvement_surcharge from nyc_taxi group by improvement_surcharge;
-- Valid improvement_surcharge values are  0 and 0.3, we can filter out the others as they are incorrect data.

select count(*) rec_cnt, Tip_amount from nyc_taxi group by Tip_amount;
-- Checking to see if any erroneous data like negative tip amount is present, but all looks valid.

select count(*) rec_cnt, tolls_amount from nyc_taxi group by tolls_amount;
-- Checking to see if any erroneous data like negative tolls amount is present, but all looks valid.

select count(*) rec_cnt, total_amount from nyc_taxi group by total_amount;
-- Checking to see if any erroneous data like negative total_amount is present, and we see that some negative amounts are present, and we need to filter that erroneous data too
-- Total amount can be 0 in some cases if the user cancellled the cab before cab arrived to pickup point.


-- You might have encountered unusual or erroneous rows in the dataset. Can you conclude which vendor is doing a bad job in providing the records using different columns of the dataset? Summarise your conclusions based on every column where these errors are present. 
--For example,  There are unusual passenger count, i.e. 0 which is unusual.

-- We check the vendor which has given most erroneous data

select count(*) rec_cnt, vendorID from nyc_taxi
where  passenger_count <= 0
or fare_amount <= 0
or ratecodeid not in (1,2,3,4,5,6)
or  substr(tpep_pickup_datetime, 6, 2) not in ('11','12')
or substr(tpep_pickup_datetime, 1, 4) <> '2017'
or extra not in (0,0.5, 1)
or mta_tax not in (0, 0.5)
or improvement_surcharge not in (0, 0.3)
or total_amount < 0
group by vendorid;

-- rec_cnt	vendorid
--  8839	1
--  3417	2

-- So based on the above data we see that the vendorID 1, that is "Creative Mobile Technologies, LLC" is giving relatively more erroneous data.
-- We now check for each column which vendor gives more erroneous data.

select count(*) rec_cnt, vendorID from nyc_taxi
where  passenger_count <= 0
group by vendorid;
-- Vendor ID 1 - "Creative Mobile Technologies, LLC" has 6813 records with 0 passenger count, compared to 11 for  "VeriFone Inc."

select count(*) rec_cnt, vendorID from nyc_taxi
where  fare_amount <= 0
group by vendorid;
-- Vendor ID 2 - "VeriFone Inc." has more - 639 erroneous record with 0 or negative fare_amount vs 231 for vendorID 1.

select count(*) rec_cnt, vendorID from nyc_taxi
where  ratecodeid not in (1,2,3,4,5,6)
group by vendorid;
-- Vendor ID 1 - "Creative Mobile Technologies, LLC" has 8 records with invalid ratecodeID, compared to 1 for  "VeriFone Inc."


select count(*) rec_cnt, vendorID from nyc_taxi
where  substr(tpep_pickup_datetime, 6, 2) not in ('11','12')
group by vendorid;
-- VendorID 2 - "VeriFone Inc." has 12 data points from months other than Nov and Dec. VendorID 1 has none.

-- We also check the year of the data, and make sure that data other than 2017 can be filtered
select count(*) rec_cnt, vendorID from nyc_taxi
where  substr(tpep_pickup_datetime, 1, 4) <> '2017'
group by vendorid;
-- VendorID 2 - "VeriFone Inc." has 8 data points which are not of 2017. VendorID 1 has none.

select count(*) rec_cnt, vendorID from nyc_taxi
where  extra not in (0,0.5, 1)
group by vendorid;
-- Vendor ID 1 - "Creative Mobile Technologies, LLC" has 1823 records with invalid extra, compared to 3033 for  "VeriFone Inc." So vendor ID 2 has more incorrect data for extra column.


select count(*) rec_cnt, vendorID from nyc_taxi
where  mta_tax not in (0, 0.5)
group by vendorid;
-- Vendor ID 1 - "Creative Mobile Technologies, LLC" has 1 record with invalid mta_tax, compared to 547 for  vendor ID 2 - "VeriFone Inc."


select count(*) rec_cnt, vendorID from nyc_taxi
where  improvement_surcharge not in (0, 0.3)
group by vendorid;
-- Vendor ID 1 - "Creative Mobile Technologies, LLC" has 0 records with invalid improvement_surcharge, compared to 562 invalid rimprovement_surcharge for vendorid 2 - "VeriFone Inc."


select count(*) rec_cnt, vendorID from nyc_taxi
where  total_amount <0
group by vendorid;
-- Vendor ID 1 - "Creative Mobile Technologies, LLC" has 0 records with invalid total_amount, compared to 558 records with invalid total_amount for vendorid 2 - "VeriFone Inc."

------------------------------------------
------------------------------------------
-- Next we load the clean data into new table and partition the table too.


--IMPORTANT: Before partitioning any table, make sure you run the below commands. We will partition at a later point of time
SET hive.exec.max.dynamic.partitions=100000;
SET hive.exec.max.dynamic.partitions.pernode=100000;

-- Drop table if exists already so that it won't interrupt for our further create queries
drop table nyc_taxi_partition_orc;



-- First, create ORC table 
create external table if not exists nyc_taxi_partition_orc
(tpep_pickup_datetime string, 
tpep_dropoff_datetime string, 
Passenger_count int, 
Trip_distance double,
RateCodeID int, 
Store_and_fwd_flag string,
PULocationID int, 
DOLocationID int, 
Payment_type int, 
Fare_amount double, 
Extra double, 
MTA_tax double, 
Tip_amount double, 
Tolls_amount double, 
Improvement_surcharge double, 
total_amount double)
partitioned by (month int, vendorid int)
stored as orc location '/user/hive/warehouse/s_atha_orc'
tblproperties ("orc.compress"="SNAPPY");


select * from nyc_taxi_partition_orc;

-- Inserting with the overwriting orc table with the partition with month and vendroid so that it can make our table easier to be queried for futher analysis. 
-- Some of the queries involve vendorid, so partitioning on vendorID is very helpful for query performance.
-- Month wise also we have 2 months, so partitioning by them is helpful, and some queries need month wise filtering too.

insert overwrite table nyc_taxi_partition_orc partition(month, vendorid)
select 
`tpep_pickup_datetime`,
`tpep_dropoff_datetime`,
`passenger_count`,
`trip_distance`,
`RatecodeID`,
`store_and_fwd_flag`,
`PULocationID`,
`DOLocationID`,
`payment_type`,
`fare_amount`,
`extra`,
`mta_tax`,
`tip_amount`,
`tolls_amount`,
`improvement_surcharge`,
`total_amount`,
cast(substr(tpep_pickup_datetime, 6, 2) as int) `month`,
`VendorID`
from nyc_taxi
where passenger_count > 0
and fare_amount > 0
and ratecodeid  in (1,2,3,4,5,6)
and substr(tpep_pickup_datetime, 6, 2) in ('11','12') 
and substr(tpep_pickup_datetime, 1, 4) = '2017'
and extra  in (0,0.5, 1)
and mta_tax  in (0, 0.5)
and improvement_surcharge  in (0, 0.3)
and total_amount >= 0;


select count(*) as rec_cnt from nyc_taxi_partition_orc; -- 1162313

-- After cleanup of data we see that the number of records are 1162313 reduced from 1174569.

-- Vendor wise data check
select case when vendorid = 1 then "Creative Mobile Technologies, LLC"
            else "VeriFone Inc."
        end as TPEP_provider,
        count(*) rec_cnt
from nyc_taxi_partition_orc
group by vendorid
order by rec_cnt; -- 	518547 and 643766 as below


-- 	tpep_provider	rec_cnt
--  VeriFone Inc. (Vendor ID 2)	643766
--  Creative Mobile Technologies, LLC(vendorID 1)  518547

select * from nyc_taxi_partition_orc limit 10;

-- Now we have a clean set of data and can perform oyr analysis on the same.

-----------------------------------------------
-----------------------------------------------
--Analysis-I

-- 1. Compare the overall average fare per trip for November and December.

select avg(fare_amount) avg_fare,
       case when month == 11 then "November"
       else "December"
       end  month_name
from nyc_taxi_partition_orc
group by month
order by avg_fare desc;

-- We see that the overall average fare between November and Decmber are almost similar with November having a slight higher fare with $12.96, as cmpared to December with $12.75
-- avg_fare	            month_name
-- 12.96429612427926	November
-- 12.759279545473849	December


--2. Explore the ‘number of passengers per trip’ - how many trips are made by each level of ‘Passenger_count’? Do most people travel solo or with other people?

select passenger_count, count(*) rec_cnt from nyc_taxi_partition_orc
group by passenger_count
order by rec_cnt desc;
-- We see that more number of trips are done by passenger travelling solo (823959) compared to others. So people do prefer travelling solo. 
-- Next highest is 2 persons - 175830. 3 or 4 passgeres are further less 50K and 24 K respectively.


--3. Which is the most preferred mode of payment?
-- We find the preferred mode based on the payment type with data available in dictionary.
select case 
          when payment_type = 1 then "Credit_card"
          when payment_type = 2 then "Cash"
          when payment_type = 3 then "No_Charge"
          when payment_type = 4 then "Dispute"
          when payment_type = 5 then "Unknown"
          when payment_type = 6 then "Voided_Trip"
          else "Other"
       end as payment_mode,
       count(*) rec_cnt
from nyc_taxi_partition_orc
group by payment_type
order by rec_cnt desc;

-- payment_mode	rec_cnt
--	Credit_card	782549
--	Cash	372651
--	No_Charge	5643
--	Dispute	1470

-- So we see the preferred payment mode is Credit Card with number as 782549 (67%). 
-- This is followed by Cash which is 372651 (32%). 

--4. What is the average tip paid per trip? Compare the average tip with the 25th, 50th and 75th percentiles and comment whether the ‘average tip’ is a representative statistic (of the central tendency) of ‘tip amount paid’. 
--   Hint: You may use percentile_approx(DOUBLE col, p): Returns an approximate pth percentile of a numeric column (including floating point types) in the group.

select round(avg(tip_amount),2) from nyc_taxi_partition_orc;
--Average tip_amount per trip is $1.83

select percentile_approx(tip_amount, 0.25) tip_25, 
       percentile_approx(tip_amount, 0.50) tip_50,
       percentile_approx(tip_amount, 0.75) tip_75,
       round(avg(tip_amount),2) avg_tip
from nyc_taxi_partition_orc;

-- tip_25	tip_50	tip_75	avg_tip
-- 	0	    1.36	2.45	1.83

-- Based on the above data we see that the average tip amount lies between 50th percentile and 75th percentile of tip amount.COMMENT


--5. Explore the ‘Extra’ (charge) variable - what fraction of total trips have an extra charge is levied?

select extra, count(*) as rec_cnt from nyc_taxi_partition_orc group by extra;

select round(sum(case when extra <> 0 then 1 else 0 end) /count(VendorID),4) extra_trip
from nyc_taxi_partition_orc; -- 0.4603

--So from above query we see that 46.03% of all trips have extra's levied on them.

-----------------------------------------------
-----------------------------------------------
--Analysis-II

--What is the correlation between the number of passengers on any given trip, and the tip paid per trip? 
--Do multiple travellers tip more compared to solo travellers? Hint: Use CORR(Col_1, Col_2)

select CORR(passenger_count, tip_amount) correlation from nyc_taxi_partition_orc; -- -0.005010817124445777

select passenger_count, tip_amount, count(*) rec_cnt
from nyc_taxi_partition_orc
group by passenger_count, tip_amount; 

-- We do not see any correlation between number of passengers and tip_amount The correlation is -0.0050 which means no relation at all.COMMENT


-- 2. Segregate the data into five segments of ‘tip paid’: [0-5), [5-10), [10-15) , [15-20) and >=20. 
--    Calculate the percentage share of each bucket (i.e. the fraction of trips falling in each bucket).

select round(SUM( IF( tip_cat == 'tip_0_5', rec_cnt , 0 ) )/ sum(rec_cnt) * 100, 2) as tip_0_5_pct,
       round(SUM( IF( tip_cat == 'tip_5_10', rec_cnt , 0 ) )/ sum(rec_cnt) * 100, 2) as tip_5_10_pct,
       round(SUM( IF( tip_cat == 'tip_10_15', rec_cnt , 0 ) )/ sum(rec_cnt) * 100, 2) as tip_10_15_pct,
       round(SUM( IF( tip_cat == 'tip_15_20', rec_cnt , 0 ) )/ sum(rec_cnt) * 100, 2) as tip_15_20_pct,
       round(SUM( IF( tip_cat == 'tip_20_grt', rec_cnt, 0 ) )/ sum(rec_cnt) * 100, 2) as tip_20_grt_pct
from (
    select case when tip_amount >= 0 and tip_amount <5 then "tip_0_5"
                when tip_amount >= 5 and tip_amount <10 then "tip_5_10"
                when tip_amount >= 10 and tip_amount <15 then "tip_10_15"
                when tip_amount >= 15 and tip_amount <20 then "tip_15_20"
                else "tip_20_grt"
                end  as tip_cat,
            count(*) rec_cnt
    from nyc_taxi_partition_orc
    group by case when tip_amount >= 0 and tip_amount <5 then "tip_0_5"
                when tip_amount >= 5 and tip_amount <10 then "tip_5_10"
                when tip_amount >= 10 and tip_amount <15 then "tip_10_15"
                when tip_amount >= 15 and tip_amount <20 then "tip_15_20"
                else "tip_20_grt"
                end ) a;
                
-- Segregated tip_amount data as percentages are shown below
--	tip_0_5_pct	tip_5_10_pct	tip_10_15_pct	tip_15_20_pct	tip_20_grt_pct
--	92.32	    5.64	        1.74	        0.2          	0.1
-- So we see that the tip in range of $0 to $5 is maximum with percenage as 92.32%



-- 3. Which month has a greater average ‘speed’ - November or December? 
--    Note that the variable ‘speed’ will have to be derived from other metrics. Hint: You have columns for distance and time.

select * from nyc_taxi_partition_orc limit 10;
-- We have the pickup and dropoff time in string format. We cnvert it to unix_timestamp and subtract dropoff time from pickup.
-- This gives us the time of cab moving in seconds. We convert it to hours, and then divide the trip distance(in miles) by time taken.
-- This will give us the speed in mph (miles per hour)
-- Next we calculate the average speed for each month.

select  
round(avg(trip_distance*60*60/(UNIX_TIMESTAMP(tpep_dropoff_datetime,'yyyy-MM-dd HH:mm:ss') - UNIX_TIMESTAMP(tpep_pickup_datetime,'yyyy-MM-dd HH:mm:ss'))),2) as avg_speed,
case when month == 11 then "November"
       else "December"
       end  month_name
from nyc_taxi_partition_orc 
group by month
order by avg_speed;

--	avg_speed	month_name
--	10.94	    November
--	11.04	    December
-- So based on the above query we see that December has higher average speed of 11.04 mph as compared to November month with 10.94 mph.




-- 4. Analyse the average speed of the most happening days of the year, i.e. 31st December (New year’s eve) and 25th December (Christmas) and compare it with the overall average. 

select  
round(avg(trip_distance*60*60/(UNIX_TIMESTAMP(tpep_dropoff_datetime,'yyyy-MM-dd HH:mm:ss') - UNIX_TIMESTAMP(tpep_pickup_datetime,'yyyy-MM-dd HH:mm:ss'))),2) as avg_speed,
'Overall Avg Speed' as type_date
from nyc_taxi_partition_orc
union all
select  
round(avg(trip_distance*60*60/(UNIX_TIMESTAMP(tpep_dropoff_datetime,'yyyy-MM-dd HH:mm:ss') - UNIX_TIMESTAMP(tpep_pickup_datetime,'yyyy-MM-dd HH:mm:ss'))),2) as avg_speed,
substr(tpep_pickup_datetime, 1, 10) as type_date
from nyc_taxi_partition_orc
where substr(tpep_pickup_datetime, 1, 10) in ('2017-12-25', '2017-12-31')
group by substr(tpep_pickup_datetime, 1, 10)
order by avg_speed desc;

-- We see that the overall average speed is 10.99 mph and the average speed on 25th Dccember and 31st December are higher than that.
-- 25th December is more with value as 15.24 mph, and 31st Dec is lesser with 13.2 mph, but they are higher than the overall average. 


------------------------------
------------------------------